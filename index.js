const express = require('express');
const crypto = require('crypto');
const dotenv = require('dotenv');
const bodyParser = require('body-parser');
const axios = require('axios');
const { createClient } = require('@supabase/supabase-js');
const path = require('path');  // –¥–æ–±–∞–≤–∏–º –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—É—Ç—è–º–∏ —Ñ–∞–π–ª–æ–≤

dotenv.config();

const app = express();
const port = process.env.PORT || 3005;

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_KEY;
const supabase = createClient(supabaseUrl, supabaseKey);

let isAuthorizationCancelled = false; // –§–ª–∞–≥, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å, –æ—Ç–º–µ–Ω–µ–Ω–∞ –ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è

async function getPasswordState() {
  const { data, error } = await supabase
    .from('password_state')
    .select('*')
    .single();

  if (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∞—Ä–æ–ª—è –∏–∑ Supabase:', error.message);
    return { password: null, valid: false };
  }

  return data;
}

async function savePasswordState(password, valid) {
  const { error } = await supabase
    .from('password_state')
    .upsert({ id: 1, password, valid }, { onConflict: 'id' });

  if (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∞—Ä–æ–ª—è –≤ Supabase:', error.message);
  }
}

async function addAuthorizedDevice(model, brand, device, password, androidId) {
  const { error } = await supabase
    .from('authorized_devices')
    .insert({ model, brand, device, password, android_id: androidId });

  if (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ Supabase:', error.message);
  }
}

function generatePassword() {
  const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
  return Array.from({ length: 7 }, () => characters[crypto.randomInt(0, characters.length)]).join(''); 
}

async function generateAndLogPassword() {
  const password = generatePassword();
  await savePasswordState(password, true);

  const telegramMessage = `<b>üîë –ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:</b>\n<code>${password}</code>`;
  console.log(`–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –∫–æ–¥: ${password}`);
  sendToTelegram(telegramMessage);
}

async function sendToTelegram(message) {
  const { TELEGRAM_BOT_TOKEN: botToken, TELEGRAM_CHAT_ID: chatId } = process.env;
  const url = `https://api.telegram.org/bot${botToken}/sendMessage`;

  try {
    const response = await axios.post(url, {
      chat_id: chatId,
      text: message,
      parse_mode: 'HTML',
    });
    console.log('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram.');
    return response.data.result.message_id;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:', error.message);
  }
}

async function longPolling() {
  const { TELEGRAM_BOT_TOKEN: botToken, TELEGRAM_CHAT_ID: chatId } = process.env;
  let offset = 0;

  while (true) {
    const url = `https://api.telegram.org/bot${botToken}/getUpdates?offset=${offset}&timeout=60`;

    try {
      const response = await axios.get(url);
      const updates = response.data.result;

      if (updates.length > 0) {
        updates.forEach((update) => {
          offset = update.update_id + 1;

          if (update.message && update.message.chat.id === parseInt(chatId)) {
            if (update.message.text === '/pass') {
              console.log('–ö–æ–º–∞–Ω–¥–∞ /pass –ø–æ–ª—É—á–µ–Ω–∞. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å...');
              if (isAuthorizationCancelled) {
                sendToTelegram('‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ö–æ–º–∞–Ω–¥–∞ /pass –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.');
              } else {
                generateAndLogPassword();
              }
            } else if (update.message.text === '/cancel') {
              console.log('–ö–æ–º–∞–Ω–¥–∞ /cancel –ø–æ–ª—É—á–µ–Ω–∞. –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...');
              isAuthorizationCancelled = true;
              sendToTelegram('‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—Å–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –±—É–¥—É—Ç –æ—Ç–∫–ª–æ–Ω—è—Ç—å—Å—è.');
            } else if (update.message.text === '/start') {
              console.log('–ö–æ–º–∞–Ω–¥–∞ /start –ø–æ–ª—É—á–µ–Ω–∞. –†–∞–∑—Ä–µ—à–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...');
              isAuthorizationCancelled = false;
              sendToTelegram('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.');
            }
          }
        });
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ long-polling:', error.message);
    }
  }
}

async function initializePassword() {
  const passwordState = await getPasswordState();

  if (!passwordState || !passwordState.valid) {
    console.log('–ü–∞—Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π...');
    await generateAndLogPassword();
  } else {
    console.log(`–¢–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å: ${passwordState.password}`);
  }
}

initializePassword(); // –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞
setInterval(generateAndLogPassword, 60 * 60 * 1000); // –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å —Ä–∞–∑ –≤ —á–∞—Å

app.use(bodyParser.json());

app.post('/use-android-id', async (req, res) => {
  const { android_id, model, brand, device } = req.body;

  if (!android_id) {
    return res.status(400).json({ error: 'Android ID –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' });
  }

  if (isAuthorizationCancelled) {
    return res.status(403).json({ error: '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.' });
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å —Ç–∞–∫–∏–º Android ID –≤ –±–∞–∑–µ
  const { data, error } = await supabase
    .from('authorized_devices')
    .select('*')
    .eq('android_id', android_id)
    .maybeSingle(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º maybeSingle, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç

  if (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ Supabase:', error.message);
    return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞' });
  }

  if (data) {
    // –ï—Å–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–æ, —Ç–æ –æ–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ
    const message = `‚úÖ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ –ø–æ Android ID:\n–ú–æ–¥–µ–ª—å: ${model}\n–ë—Ä–µ–Ω–¥: ${brand}\n–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: ${device}\nAndroid ID: ${android_id}`;
    await sendToTelegram(message);

    return res.status(200).json({ message: '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ' });
  } else {
    // –ï—Å–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ
    const message = `‚ö†Ô∏è –ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ Android ID:\n–ú–æ–¥–µ–ª—å: ${model}\n–ë—Ä–µ–Ω–¥: ${brand}\n–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: ${device}\nAndroid ID: ${android_id}`;
    await sendToTelegram(message);

    return res.status(401).json({ error: '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ' });
  }
});


app.post('/use-password', async (req, res) => {
  const { password, model, brand, device, android_id } = req.body;

  if (!password || !android_id) {
    return res.status(400).json({ error: '–ü–∞—Ä–æ–ª—å –∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
  }

  if (isAuthorizationCancelled) {
    return res.status(403).json({ error: '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.' });
  }

  const passwordState = await getPasswordState();

  if (passwordState.valid && passwordState.password === password) {
    await savePasswordState(passwordState.password, false);
    await generateAndLogPassword();
    await addAuthorizedDevice(model, brand, device, password, android_id);

    const message = `‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è:\n–ú–æ–¥–µ–ª—å: ${model}\n–ë—Ä–µ–Ω–¥: ${brand}\n–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: ${device}\nAndroid ID: ${android_id}`;
    await sendToTelegram(message);

    return res.status(200).json({ message: '–ü–∞—Ä–æ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω. –ù–æ–≤—ã–π –∫–æ–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω.' });
  } else {
    const message = `‚ö†Ô∏è –ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è:\n–ü–∞—Ä–æ–ª—å: ${password}\n–ú–æ–¥–µ–ª—å: ${model}\n–ë—Ä–µ–Ω–¥: ${brand}\n–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: ${device}\nAndroid ID: ${android_id}`;
    await sendToTelegram(message);

    return res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –∏–ª–∏ –ø–∞—Ä–æ–ª—å —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω' });
  }
});

function runTask() {
  console.log("–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞:", new Date());
}

app.get('/', (req, res) => {
  const htmlPath = path.join(__dirname, 'index.html');
    runTask();
  res.sendFile(htmlPath);
});

app.listen(port, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ http://localhost:${port}`);
});

longPolling(); // –Ω–∞—á–∏–Ω–∞–µ–º long-polling
